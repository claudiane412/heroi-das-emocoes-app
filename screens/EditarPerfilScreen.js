import React, { useState } from 'react';
import {
Â  View,
Â  Text,
Â  TextInput,
Â  StyleSheet,
Â  TouchableOpacity,
Â  Alert,
Â  ScrollView,
Â  Image,
Â  Platform,
} from 'react-native';
import Slider from '@react-native-community/slider';
import AsyncStorage from '@react-native-async-storage/async-storage';

const AVATARES = [
Â  { id: 1, uri: 'https://i.pravatar.cc/150?img=12', nome: 'HerÃ³i Azul' },
Â  { id: 2, uri: 'https://i.pravatar.cc/150?img=5', nome: 'HerÃ³i Verde' },
Â  { id: 3, uri: 'https://i.pravatar.cc/150?img=15', nome: 'HerÃ³i Laranja' },
Â  { id: 4, uri: 'https://i.pravatar.cc/150?img=20', nome: 'HerÃ³i Roxo' },
];

const HUMORES = [
Â  { emoji: 'ðŸ˜Š', frase: 'Feliz e cheio de energia' },
Â  { emoji: 'ðŸ˜Œ', frase: 'Calmo e tranquilo' },
Â  { emoji: 'ðŸ˜”', frase: 'Um pouco triste' },
Â  { emoji: 'ðŸ˜ ', frase: 'Com raiva, tentando me acalmar' },
];

export default function EditarPerfilScreen({ navigation, route }) {
Â  const params = route.params || {};

Â  const {
Â  Â  nomeAtual = '',
Â  Â  emailAtual = '',
Â  Â  nivelAtual = 0.35,
Â  Â  avatarIdAtual = 1,
Â  Â  humorIndexAtual = 0,
Â  } = params;

Â  const [nome, setNome] = useState(nomeAtual);
Â  const [email, setEmail] = useState(emailAtual);
Â  const [nivelHeroi, setNivelHeroi] = useState(nivelAtual);
Â  const [avatarId, setAvatarId] = useState(avatarIdAtual);
Â  const [humorIndex, setHumorIndex] = useState(humorIndexAtual);

Â  function validarEmail(email) {
Â  Â  const re = /\S+@\S+\.\S+/;
Â  Â  return re.test(email);
Â  }

Â  async function salvar() {
Â  Â  if (!nome.trim()) {
Â  Â  Â  Alert.alert('Erro', 'O nome nÃ£o pode ficar vazio.');
Â  Â  Â  return;
Â  Â  }
Â  Â  if (!validarEmail(email)) {
Â  Â  Â  Alert.alert('Erro', 'Por favor, insira um e-mail vÃ¡lido.');
Â  Â  Â  return;
Â  Â  }

Â  Â  try {
Â  Â  Â  const token = await AsyncStorage.getItem("token");
Â  Â  Â  if (!token) {
Â  Â  Â  Â  Alert.alert('Erro', 'NÃ£o foi possÃ­vel autenticar. FaÃ§a o login novamente.');
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  const humorSelecionado = HUMORES[humorIndex]?.frase;

Â  Â  Â  const response = await fetch("http://10.0.2.15:3000/usuario/atualizar", {
Â  Â  Â  Â  method: 'PUT',
Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  'Content-Type': 'application/json',
Â  Â  Â  Â  Â  'Authorization': `Bearer ${token}`,
Â  Â  Â  Â  },
Â  Â  Â  Â  body: JSON.stringify({
Â  Â  Â  Â  Â  nome: nome.trim(),
Â  Â  Â  Â  Â  email: email.trim(), // âœ… Agora o email Ã© enviado
Â  Â  Â  Â  Â  nivel_heroi: nivelHeroi,
Â  Â  Â  Â  Â  avatar_id: avatarId,
Â  Â  Â  Â  Â  humor_atual: humorSelecionado,
Â  Â  Â  Â  }),
Â  Â  Â  });

Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  const errorData = await response.json();
Â  Â  Â  Â  throw new Error(errorData.message || 'Erro ao atualizar perfil.');
Â  Â  Â  }

Â  Â  Â  Alert.alert('Sucesso', 'Perfil atualizado com sucesso!');
Â  Â  Â  navigation.goBack();

Â  Â  } catch (error) {
Â  Â  Â  console.error('Erro ao salvar o perfil:', error);
Â  Â  Â  Alert.alert('Erro', error.message || 'NÃ£o foi possÃ­vel salvar o perfil. Tente novamente.');
Â  Â  }
Â  }

Â  return (
Â  Â  <ScrollView style={styles.container} contentContainerStyle={{ paddingBottom: 40 }}>
Â  Â  Â  <Text style={styles.titulo}>Editar Perfil</Text>
Â  Â  Â  <Text style={styles.label}>Nome</Text>
Â  Â  Â  <TextInput
Â  Â  Â  Â  style={styles.input}
Â  Â  Â  Â  value={nome}
Â  Â  Â  Â  onChangeText={setNome}
Â  Â  Â  Â  placeholder="Digite seu nome"
Â  Â  Â  Â  placeholderTextColor="#999"
Â  Â  Â  />
Â  Â  Â  <Text style={styles.label}>Email</Text>
Â  Â  Â  <TextInput
Â  Â  Â  Â  style={styles.input}
Â  Â  Â  Â  value={email}
Â  Â  Â  Â  onChangeText={setEmail}
Â  Â  Â  Â  placeholder="Digite seu e-mail"
Â  Â  Â  Â  placeholderTextColor="#999"
Â  Â  Â  Â  keyboardType="email-address"
Â  Â  Â  Â  autoCapitalize="none"
Â  Â  Â  Â  autoCorrect={false}
Â  Â  Â  />
Â  Â  Â  <Text style={styles.label}>Escolha seu Avatar</Text>
Â  Â  Â  <View style={styles.avatarsContainer}>
Â  Â  Â  Â  {AVATARES.map(({ id, uri, nome }) => (
Â  Â  Â  Â  Â  <TouchableOpacity
Â  Â  Â  Â  Â  Â  key={id}
Â  Â  Â  Â  Â  Â  style={[styles.avatarOption, avatarId === id && styles.avatarSelecionado]}
Â  Â  Â  Â  Â  Â  onPress={() => setAvatarId(id)}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <Image source={{ uri }} style={styles.avatarImagem} />
Â  Â  Â  Â  Â  Â  <Text style={styles.avatarNome}>{nome}</Text>
Â  Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  Â  ))}
Â  Â  Â  </View>
Â  Â  Â  <Text style={styles.label}>Humor do Dia</Text>
Â  Â  Â  <View style={styles.humoresContainer}>
Â  Â  Â  Â  {HUMORES.map(({ emoji, frase }, index) => (
Â  Â  Â  Â  Â  <TouchableOpacity
Â  Â  Â  Â  Â  Â  key={index}
Â  Â  Â  Â  Â  Â  style={[styles.humorOption, humorIndex === index && styles.humorSelecionado]}
Â  Â  Â  Â  Â  Â  onPress={() => setHumorIndex(index)}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <Text style={styles.humorEmoji}>{emoji}</Text>
Â  Â  Â  Â  Â  Â  <Text style={styles.humorFrase}>{frase}</Text>
Â  Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  Â  ))}
Â  Â  Â  </View>
Â  Â  Â  <Text style={styles.label}>NÃ­vel do HerÃ³i: {Math.round(nivelHeroi * 100)}%</Text>
Â  Â  Â  <Slider
Â  Â  Â  Â  minimumValue={0}
Â  Â  Â  Â  maximumValue={1}
Â  Â  Â  Â  value={nivelHeroi}
Â  Â  Â  Â  onValueChange={setNivelHeroi}
Â  Â  Â  Â  minimumTrackTintColor="#3A6EBF"
Â  Â  Â  Â  maximumTrackTintColor="#ccc"
Â  Â  Â  Â  step={0.01}
Â  Â  Â  Â  style={{ marginBottom: 20 }}
Â  Â  Â  />
Â  Â  Â  <TouchableOpacity style={styles.botao} onPress={salvar}>
Â  Â  Â  Â  <Text style={styles.textoBotao}>Salvar</Text>
Â  Â  Â  </TouchableOpacity>
Â  Â  Â  <TouchableOpacity
Â  Â  Â  Â  style={[styles.botao, styles.botaoCancelar]}
Â  Â  Â  Â  onPress={() => navigation.goBack()}
Â  Â  Â  >
Â  Â  Â  Â  <Text style={[styles.textoBotao, styles.textoCancelar]}>Cancelar</Text>
Â  Â  Â  </TouchableOpacity>
Â  Â  </ScrollView>
Â  );
}

const styles = StyleSheet.create({
Â  container: {
Â  Â  backgroundColor: '#F0F5FA',
Â  Â  flex: 1,
Â  Â  padding: 20,
Â  },
Â  titulo: {
Â  Â  fontSize: 28,
Â  Â  fontWeight: 'bold',
Â  Â  color: '#395B8A',
Â  Â  marginBottom: 25,
Â  Â  alignSelf: 'center',
Â  },
Â  label: {
Â  Â  fontSize: 16,
Â  Â  color: '#3B4E76',
Â  Â  fontWeight: '600',
Â  Â  marginBottom: 8,
Â  },
Â  input: {
Â  Â  backgroundColor: '#fff',
Â  Â  borderRadius: 10,
Â  Â  paddingHorizontal: 15,
Â  Â  paddingVertical: 12,
Â  Â  fontSize: 16,
Â  Â  marginBottom: 20,
Â  Â  borderWidth: 1,
Â  Â  borderColor: '#cbd5e1',
Â  Â  color: '#1e293b',
Â  },
Â  avatarsContainer: {
Â  Â  flexDirection: 'row',
Â  Â  justifyContent: 'space-around',
Â  Â  marginBottom: 25,
Â  },
Â  avatarOption: {
Â  Â  alignItems: 'center',
Â  Â  borderRadius: 10,
Â  Â  padding: 5,
Â  Â  borderWidth: 2,
Â  Â  borderColor: 'transparent',
Â  },
Â  avatarSelecionado: {
Â  Â  borderColor: '#3A6EBF',
Â  },
Â  avatarImagem: {
Â  Â  width: 70,
Â  Â  height: 70,
Â  Â  borderRadius: 35,
Â  },
Â  avatarNome: {
Â  Â  marginTop: 5,
Â  Â  fontSize: 12,
Â  Â  color: '#395B8A',
Â  Â  fontWeight: '600',
Â  Â  textAlign: 'center',
Â  },
Â  humoresContainer: {
Â  Â  marginBottom: 25,
Â  },
Â  humorOption: {
Â  Â  flexDirection: 'row',
Â  Â  alignItems: 'center',
Â  Â  paddingVertical: 8,
Â  Â  paddingHorizontal: 15,
Â  Â  borderRadius: 15,
Â  Â  borderWidth: 2,
Â  Â  borderColor: 'transparent',
Â  Â  marginBottom: 12,
Â  },
Â  humorSelecionado: {
Â  Â  borderColor: '#3A6EBF',
Â  Â  backgroundColor: '#D6E0F5',
Â  },
Â  humorEmoji: {
Â  Â  fontSize: 30,
Â  Â  marginRight: 12,
Â  },
Â  humorFrase: {
Â  Â  fontSize: 16,
Â  Â  color: '#395B8A',
Â  Â  fontWeight: '600',
Â  },
Â  botao: {
Â  Â  backgroundColor: '#3A6EBF',
Â  Â  paddingVertical: 15,
Â  Â  borderRadius: 12,
Â  Â  alignItems: 'center',
Â  Â  marginBottom: 15,
Â  },
Â  botaoCancelar: {
Â  Â  backgroundColor: '#cbd5e1',
Â  },
Â  textoBotao: {
Â  Â  color: '#fff',
Â  Â  fontSize: 18,
Â  Â  fontWeight: '700',
Â  },
Â  textoCancelar: {
Â  Â  color: '#3A6EBF',
Â  },
});